// .vitepress/theme/utils/posts.data.js
import { createContentLoader } from "file:///D:/myCode/Blog/node_modules/.store/vitepress@1.6.3/node_modules/vitepress/dist/node/index.js";
var contentLoaderConfig = {
  includeSrc: true,
  render: true,
  excerpt: true,
  transform(rawData) {
    return rawData.sort((a, b) => {
      return +new Date(b.frontmatter.date) - +new Date(a.frontmatter.date);
    }).map((page) => {
      const headings = [];
      if (page.html) {
        const headingRegex = /<h([1-5]) id="([^"]+)"[^>]*>([\s\S]*?)<\/h\1>/gi;
        let match;
        while ((match = headingRegex.exec(page.html)) !== null) {
          headings.push({
            level: parseInt(match[1]),
            text: match[3].replace(/<[^>]+>/g, "").replace("&ZeroWidthSpace;", "").trim(),
            // 移除标签内嵌元素
            anchor: `#${match[2]}`,
            link: `${page.url}#${match[2]}`
          });
        }
      }
      let excerpt = page.excerpt;
      if (true) {
        const plainText = page.src.replace(/^---[\s\S]*?---/, "").replace(/(```[\s\S]*?```|#+\s+|\[.*?\]\(.*?\))/g, "").substring(0, 30);
        excerpt = plainText + (plainText.length >= 30 ? "......" : "");
        excerpt = excerpt.trim();
      }
      return {
        headings,
        title: page.frontmatter.title,
        date: page.frontmatter.date,
        link: page.url,
        excerpt,
        tags: (page.frontmatter.tags?.split(/[,\s]+/) ?? []).map((tag) => tag.trim()),
        categories: (page.frontmatter.categories?.split(",") ?? []).map((category) => category.trim()),
        cover: page.frontmatter.cover || ""
        // 封面图也添加默认值
      };
    });
  }
};
var posts_data_default = createContentLoader("posts/**/*.md", contentLoaderConfig);
export {
  posts_data_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLnZpdGVwcmVzcy90aGVtZS91dGlscy9wb3N0cy5kYXRhLmpzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiRDpcXFxcbXlDb2RlXFxcXEJsb2dcXFxcLnZpdGVwcmVzc1xcXFx0aGVtZVxcXFx1dGlsc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiRDpcXFxcbXlDb2RlXFxcXEJsb2dcXFxcLnZpdGVwcmVzc1xcXFx0aGVtZVxcXFx1dGlsc1xcXFxwb3N0cy5kYXRhLmpzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9EOi9teUNvZGUvQmxvZy8udml0ZXByZXNzL3RoZW1lL3V0aWxzL3Bvc3RzLmRhdGEuanNcIjtpbXBvcnQgeyBjcmVhdGVDb250ZW50TG9hZGVyIH0gZnJvbSAndml0ZXByZXNzJ1xyXG5jb25zdCBjb250ZW50TG9hZGVyQ29uZmlnID0ge1xyXG4gICAgaW5jbHVkZVNyYzogdHJ1ZSxcclxuICAgIHJlbmRlcjogdHJ1ZSxcclxuICAgIGV4Y2VycHQ6IHRydWUsXHJcbiAgICB0cmFuc2Zvcm0ocmF3RGF0YSkge1xyXG4gICAgICAgIHJldHVybiByYXdEYXRhLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuICtuZXcgRGF0ZShiLmZyb250bWF0dGVyLmRhdGUpIC0gK25ldyBEYXRlKGEuZnJvbnRtYXR0ZXIuZGF0ZSlcclxuICAgICAgICB9KS5tYXAoKHBhZ2UpID0+IHtcclxuICAgICAgICAgICAgLy8gXHU1OTI3XHU3RUIyXHJcbiAgICAgICAgICAgIGNvbnN0IGhlYWRpbmdzID0gW11cclxuICAgICAgICAgICAgaWYgKHBhZ2UuaHRtbCkge1xyXG4gICAgICAgICAgICAgICAgLy8gXHU0RjdGXHU3NTI4XHU2QjYzXHU1MjE5XHU1MzM5XHU5MTREXHU2MjQwXHU2NzA5XHU2ODA3XHU5ODk4XHU2ODA3XHU3QjdFXHJcbiAgICAgICAgICAgICAgICBjb25zdCBoZWFkaW5nUmVnZXggPSAvPGgoWzEtNV0pIGlkPVwiKFteXCJdKylcIltePl0qPihbXFxzXFxTXSo/KTxcXC9oXFwxPi9naVxyXG4gICAgICAgICAgICAgICAgbGV0IG1hdGNoXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoKG1hdGNoID0gaGVhZGluZ1JlZ2V4LmV4ZWMocGFnZS5odG1sKSkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWFkaW5ncy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWw6IHBhcnNlSW50KG1hdGNoWzFdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogbWF0Y2hbM10ucmVwbGFjZSgvPFtePl0rPi9nLCAnJykucmVwbGFjZSgnJlplcm9XaWR0aFNwYWNlOycsICcnKS50cmltKCksIC8vIFx1NzlGQlx1OTY2NFx1NjgwN1x1N0I3RVx1NTE4NVx1NUQ0Q1x1NTE0M1x1N0QyMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmNob3I6IGAjJHttYXRjaFsyXX1gLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5rOiBgJHtwYWdlLnVybH0jJHttYXRjaFsyXX1gXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBcdTY0NThcdTg5ODFcdTU5MDRcdTc0MDZcclxuICAgICAgICAgICAgbGV0IGV4Y2VycHQgPSBwYWdlLmV4Y2VycHRcclxuICAgICAgICAgICAgaWYgKHRydWUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBsYWluVGV4dCA9IHBhZ2Uuc3JjXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL14tLS1bXFxzXFxTXSo/LS0tLywgJycpXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyhgYGBbXFxzXFxTXSo/YGBgfCMrXFxzK3xcXFsuKj9cXF1cXCguKj9cXCkpL2csICcnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5zdWJzdHJpbmcoMCwgMzApXHJcbiAgICAgICAgICAgICAgICBleGNlcnB0ID0gcGxhaW5UZXh0ICsgKHBsYWluVGV4dC5sZW5ndGggPj0gMzAgPyAnLi4uLi4uJyA6ICcnKVxyXG4gICAgICAgICAgICAgICAgZXhjZXJwdCA9IGV4Y2VycHQudHJpbSgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGhlYWRpbmdzOiBoZWFkaW5ncyxcclxuICAgICAgICAgICAgICAgIHRpdGxlOiBwYWdlLmZyb250bWF0dGVyLnRpdGxlLFxyXG4gICAgICAgICAgICAgICAgZGF0ZTogcGFnZS5mcm9udG1hdHRlci5kYXRlLFxyXG4gICAgICAgICAgICAgICAgbGluazogcGFnZS51cmwsXHJcbiAgICAgICAgICAgICAgICBleGNlcnB0OiBleGNlcnB0LFxyXG4gICAgICAgICAgICAgICAgdGFnczogKHBhZ2UuZnJvbnRtYXR0ZXIudGFncz8uc3BsaXQoL1ssXFxzXSsvKSA/PyBbXSkubWFwKHRhZyA9PiB0YWcudHJpbSgpKSxcclxuICAgICAgICAgICAgICAgIGNhdGVnb3JpZXM6IChwYWdlLmZyb250bWF0dGVyLmNhdGVnb3JpZXM/LnNwbGl0KCcsJykgPz8gW10pLm1hcChjYXRlZ29yeSA9PiBjYXRlZ29yeS50cmltKCkpLFxyXG4gICAgICAgICAgICAgICAgY292ZXI6IHBhZ2UuZnJvbnRtYXR0ZXIuY292ZXIgfHwgJycgIC8vIFx1NUMwMVx1OTc2Mlx1NTZGRVx1NEU1Rlx1NkRGQlx1NTJBMFx1OUVEOFx1OEJBNFx1NTAzQ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29udGVudExvYWRlcigncG9zdHMvKiovKi5tZCcsIGNvbnRlbnRMb2FkZXJDb25maWcpIl0sCiAgIm1hcHBpbmdzIjogIjtBQUEyUyxTQUFTLDJCQUEyQjtBQUMvVSxJQUFNLHNCQUFzQjtBQUFBLEVBQ3hCLFlBQVk7QUFBQSxFQUNaLFFBQVE7QUFBQSxFQUNSLFNBQVM7QUFBQSxFQUNULFVBQVUsU0FBUztBQUNmLFdBQU8sUUFBUSxLQUFLLENBQUMsR0FBRyxNQUFNO0FBQzFCLGFBQU8sQ0FBQyxJQUFJLEtBQUssRUFBRSxZQUFZLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxFQUFFLFlBQVksSUFBSTtBQUFBLElBQ3ZFLENBQUMsRUFBRSxJQUFJLENBQUMsU0FBUztBQUViLFlBQU0sV0FBVyxDQUFDO0FBQ2xCLFVBQUksS0FBSyxNQUFNO0FBRVgsY0FBTSxlQUFlO0FBQ3JCLFlBQUk7QUFDSixnQkFBUSxRQUFRLGFBQWEsS0FBSyxLQUFLLElBQUksT0FBTyxNQUFNO0FBQ3BELG1CQUFTLEtBQUs7QUFBQSxZQUNWLE9BQU8sU0FBUyxNQUFNLENBQUMsQ0FBQztBQUFBLFlBQ3hCLE1BQU0sTUFBTSxDQUFDLEVBQUUsUUFBUSxZQUFZLEVBQUUsRUFBRSxRQUFRLG9CQUFvQixFQUFFLEVBQUUsS0FBSztBQUFBO0FBQUEsWUFDNUUsUUFBUSxJQUFJLE1BQU0sQ0FBQyxDQUFDO0FBQUEsWUFDcEIsTUFBTSxHQUFHLEtBQUssR0FBRyxJQUFJLE1BQU0sQ0FBQyxDQUFDO0FBQUEsVUFDakMsQ0FBQztBQUFBLFFBQ0w7QUFBQSxNQUNKO0FBRUEsVUFBSSxVQUFVLEtBQUs7QUFDbkIsVUFBSSxNQUFNO0FBQ04sY0FBTSxZQUFZLEtBQUssSUFDbEIsUUFBUSxtQkFBbUIsRUFBRSxFQUM3QixRQUFRLDBDQUEwQyxFQUFFLEVBQ3BELFVBQVUsR0FBRyxFQUFFO0FBQ3BCLGtCQUFVLGFBQWEsVUFBVSxVQUFVLEtBQUssV0FBVztBQUMzRCxrQkFBVSxRQUFRLEtBQUs7QUFBQSxNQUMzQjtBQUNBLGFBQU87QUFBQSxRQUNIO0FBQUEsUUFDQSxPQUFPLEtBQUssWUFBWTtBQUFBLFFBQ3hCLE1BQU0sS0FBSyxZQUFZO0FBQUEsUUFDdkIsTUFBTSxLQUFLO0FBQUEsUUFDWDtBQUFBLFFBQ0EsT0FBTyxLQUFLLFlBQVksTUFBTSxNQUFNLFFBQVEsS0FBSyxDQUFDLEdBQUcsSUFBSSxTQUFPLElBQUksS0FBSyxDQUFDO0FBQUEsUUFDMUUsYUFBYSxLQUFLLFlBQVksWUFBWSxNQUFNLEdBQUcsS0FBSyxDQUFDLEdBQUcsSUFBSSxjQUFZLFNBQVMsS0FBSyxDQUFDO0FBQUEsUUFDM0YsT0FBTyxLQUFLLFlBQVksU0FBUztBQUFBO0FBQUEsTUFDckM7QUFBQSxJQUNKLENBQUM7QUFBQSxFQUNMO0FBQ0o7QUFFQSxJQUFPLHFCQUFRLG9CQUFvQixpQkFBaUIsbUJBQW1COyIsCiAgIm5hbWVzIjogW10KfQo=
